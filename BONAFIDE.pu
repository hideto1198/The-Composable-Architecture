@startuml name "BONA "
' has-a 白抜きひし形 o--
' part-of 黒塗りひし形 *--

package "View" {
    class "LaunchScreenView" as LaunchScreenView <<(S, lightblue)>> {}
    class "LoginView" as LoginView <<(S, lightblue)>> {}
    class "SignupView" as SignupView <<(S, lightblue)>> {}
    class "RegistrationView" as RegistrationView <<(S, lightblue)>> {}
    class "HomeView" as HomeView <<(S, lightblue)>> {}
    class "HomeHeaderView" as HomeHeaderView <<(S, lightblue)>> {}
    class "ReservationView" as ReservationView <<(S, lightblue)>> {
        let store: Store<ReservationStore, ReservationAction>
    }
    class "ReservationListView" as ReservationListView <<(S, lightblue)>> {
        var viewStore: ViewStore<ReservationStore, ReservationAction>
        }
    class "ReservationRowView" as ReservationRowView <<(S, lightblue)>> {
        var reservation: ReservationEntity
    }
    class "TicketView" as TicketView <<(S, lightblue)>> {}
    class "HomeMenuView" as HomeMenuView <<(S, lightblue)>> {}
    class "MenuView" as MenuView <<(S, lightblue)>> {
        var text: String
    }
    class "MakeReservationView" as MakeReservationView <<(S, lightblue)>> {}
    class "TrainingMenuView" as TrainingMenuView <<(S, lightblue)>> {}
    class "TrainingPlaceView" as TrainingPlaceView <<(S, lightblue)>> {}
    class "TrainerView" as TrainerView <<(S, lightblue)>> {}
    class "TrainerSelectorView" as TrainerSelectorView <<(S, lightblue)>> {}
    class "CalendarView" as CalendarView <<(S, lightblue)>> {}
    class "TimescheduleView" as TimescheduleView  <<(S, lightblue)>> {}
    class "ButtoView" as  ButtonView  <<(S, lightblue)>> {}
    class "UserinfoView" as UserinfoView <<(S, lightblue)>> {}
    class "ContactView" as ContactView <<(S, lightblue)>> {}
    class "TicketReaderView" as TicketReaderView <<(S, lightblue)>> {}

}

package "Store" {
    package "ReservationStore" {
        class "ReservationEntity: Equatable, Identifialble" as ReservationEntity <<(S, lightgreen)>> {
            var id: String = UUID().uuidString
            var date: String = ""
            var place: String = ""
            var menu: String = ""
            var trainer_menu: String = ""
            var isTap: Bool = false
        }

        class "ReservationState: Equatable" as ReservationState <<(S, lightgreen)>> {
            var reservations: [ReservationEntity] = []
            var isLoading: Bool = false
        }

        enum "ReservationAction" as ReservationAction {
            getReservation
            reservationResponse(Result<[ReservationEntity], ReservationClient.Failure>)
            onTapGesture(String)
        }

        class "ReservationEnvironment" as ReservationEnvironment <<(S, lightgreen)>> {
            var fact: ReservationClient
            var mainQueue: AnySchedulerOf<DispachQueue>
        }

        class "reservationReducer" as reservationReducer <<(l, LightPink)>> {

        }
    }

    package "TicketStore" {
        class "TicketEntity: Equatable" as TicketEntity <<(S, lightgreen)>> {
            var name: String = ""
            var counts: Int = 0
            var max_counts: Int = 0
            var sub_name: String = ""
            var sub_counts: Int = 0
            var sub_max_counts: Int = 0
        }

        class "TicketState: Equatable" as TicketState <<(S, lightgreen)>> {
            var ticket: TicketEntity = TicketEntity()
            var isLoading: Bool = false
        }

        enum "TicketAction: Equtable" as TicketAction {
            case getTicket
            case ticketResponse(Result<TicketEntity, TicketClient.Failure>)
        }

        class "TicketEnvironment" as TicketEnvironment <<S, lightgreen>> {
            var ticketClient: TicketClient
            var mainQueue: AnySchedulerOf<DispatchQueue>
        }

        class "ticketReducer" as ticketReducer <<(S, lightgreen)>> {

        }
    }

    package "HomeStore" {
        class "HomeState: Equatable" as HomeState <<(S, lightgreen)>> {
            var reservationState: ReservationState = ReservationState()
            var ticketState: TicketState = TicketState()
            var isMenu: Bool = false
        }

        enum "HomeAction: Equatable" as HomeAction {
            case reservationAction(ReservationAction)
            case ticketAction(TicketAction)
            case onMenuTap
        }

        class "HomeEnvironment" as HomeEnvironment <<(S, lightgreen)>> {
            var reservationClient: ReservationClient
            var ticketClient: TicketClient
            var mainQueue: AnySchedulerOf<DispachQueue>
            static let live = Self(
                reservationClient: ReservationClient.live,
                ticketClient: TicketClient.live,
                mainQueue: .main
            )
        }

        class "homeReducer" as homeReducer <<(S, lightgreen)>> {

        }
    }

    package "MakeReservationStore" {

    }

    package "LaunchStore" {
        class "line: Equatable" as line <<(S, lightgreen)>> {
            var x: CGFloat
            var y: CGFloat
        }

        class "LaunchState" as LaunchState <<(S, lightgreen)>> {
            var isLaunch: Bool = false
            var opacity: Double = 2.0
            var counter: Double = 0.0
            var lines: [line] = [
                line(x: bounds.width * 0.1410, y: 0),
                line(x: bounds.width * 0.3332, y: bounds.width * 0.2774),
                line(x: bounds.width * 0.2497, y: bounds.width * 0.1338)
            ]
        }

        enum "LaunchAction" as LaunchAction {
            case timer(LifecycleAction<TimerAction>)
            case onNavigate(isActive:Bool)
            case doAnimation
        }

        calss "LaunchEnvironment" as LaunchEnvironment <<(S, lightgreen)>>{
            var mainQueue: AnySchedulerOf<DispachQueue>
        }

        class "launchReducer" as launchReducer <<(S, lightgreen)>>{ 

        }
    }

    package "LifecycleStore" {
        class "LifecycleState"
    }

    package "LoginStore" {

        class "LoginState" as LoginState <<(S, lightgreen)>>{
            @BindableState var email: String = ""
            @BindableState var password: String = ""
        }

        enum "LoginAction" as LoginAction {
            loginButtonTapped
            registrationButtonTapped
        }

        class "LoginEnvironment" as LoginEnvironment <<(S, lightgreen)>> {}

        class "loginReducer" as loginReducer <<(l, LightPink)>>{}
    }

    package "RegistrationStore" {
        class "RegistrationState" as RegistrationState <<(S, lightgreen)>> {
            @BindableState var email: String = ""
            @BindableState var password: String = ""
            @BindableState var confirm_password: String = ""
            @BindableState var FIRSTNAME_1: String = ""
            @BindableState var FIRSTNAME_2: String = ""
            @BindableState var LASTNAME_1: String = ""
            @BindableState var LASTNAME_2: String = ""
            var sex_selector: Bool = false
            var birthday_selector: Date = Date()
        }

        enum "RegistrationAction" as RegistrationAction {
            sendMailButtonTapped
            resendMailButtonTapped
            nextButtonTapped
        }

        class "RegistrationEnvironment" as RegistrationEnvironment {}

        class "registrationReducer" as registrationReducer <<(l, LightPink)>> {}
    }
}
'store HomeStore
homeReducer ..o HomeView
reservationReducer ..* homeReducer
ticketReducer ..* homeReducer
HomeState --* homeReducer
HomeAction --* homeReducer
HomeEnvironment --* homeReducer

'store ReservationStore
ReservationState --* reservationReducer
ReservationEnvironment --* reservationReducer
ReservationAction --* reservationReducer
ReservationEntity --* ReservationState

'store LoginStore
loginReducer ..o LoginView
LoginState --* loginReducer
LoginEnvironment --* loginReducer
LoginAction --* loginReducer

'store RegistrationStore
registrationReducer ..o RegistrationView
RegistrationState --* registrationReducer
RegistrationAction --* registrationReducer
RegistrationEnvironment --* registrationReducer

'store TicketStore
TicketState --* ticketReducer
TicketAction --* ticketReducer
TicketEnvironment --* ticketReducer
TicketEntity --* TicketState

'view
LoginView --* LaunchScreenView
HomeView --* LaunchScreenView
SignupView --* LoginView
RegistrationView --* SignupView
HomeHeaderView --* HomeView
ReservationView --* HomeView
TicketView --* HomeView
HomeMenuView --* HomeView
MenuView --* HomeMenuView
MakeReservationView --* HomeMenuView
UserinfoView --* HomeMenuView
ContactView --* HomeMenuView
TicketReaderView --* HomeMenuView
ReservationListView --* ReservationView
ReservationRowView --* ReservationListView
TrainingMenuView --* MakeReservationView
TrainingPlaceView --* MakeReservationView
TrainerSelectorView --* MakeReservationView
TrainerView --* MakeReservationView
CalendarView --* MakeReservationView
TimescheduleView --* MakeReservationView
ButtonView --* MakeReservationView


@enduml
